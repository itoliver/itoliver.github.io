<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker_swarm集群]]></title>
    <url>%2F2018%2F04%2F08%2Fdocker-swarm%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[docker swarm集群 环境：centos7.2192.168.1.14 master swarm-manager rethinkdb controller swarm-agent consul-s1 registrator consul-template(nginx)192.168.1.15 slave-1 registrator swarm-agent consul-s2192.168.1.16 slave-2 registrator swarm-agent consul-s3docker-engine 17.05.0-ce 一、搭建docker集群环境1、先检查是否安装旧版本docker1rpm -qa|grep docker 如果有就先卸载1yum remove docker* 2、添加docker.repo安装源，写入文件12345678tee /etc/yum.repos.d/docker.repo&lt;&lt;EOF[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 3、安装docker1yum install docker-engine 4、配置防火墙123firewall-cmd --permanent --add-port=&#123;2375/tcp,3375/tcp,8500/tcp,8300/tcp,8301/tcp,8301/udp,8302/tcp,8302/udp,8400/tcp,8500/tcp,8600/tcp,8600/udp,8080/tcp,28015/tcp,29015/tcp&#125;firewall-cmd --reloadfirewall-cmd --list-all iptables内容（使用的iptables）1234567891011121314151617181920212223242526272829303132333435363738394041424344*nat:PREROUTING ACCEPT [0:0]:INPUT ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:POSTROUTING ACCEPT [0:0]:DOCKER - [0:0]-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER-A POSTROUTING -s 192.168.0.0/16 ! -o docker0 -j MASQUERADECOMMIT#*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:DOCKER - [0:0]-A FORWARD -o docker0 -j DOCKER-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT-A FORWARD -i docker0 ! -o docker0 -j ACCEPT-A FORWARD -i docker0 -o docker0 -j ACCEPT-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 2375 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 3375 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8300 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8301 -j ACCEPT-A INPUT -p udp -m state --state NEW -m udp --dport 8301 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8302 -j ACCEPT-A INPUT -p udp -m state --state NEW -m udp --dport 8302 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8400 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8500 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 8600 -j ACCEPT-A INPUT -p udp -m state --state NEW -m udp --dport 8600 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 28015 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 29015 -j ACCEPT#-A INPUT -j REJECT --reject-with icmp-host-prohibited#-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT 5、增加tcp监听端口,并配置docker加速修改/lib/systemd/system/docker.servicedaocloud加速1sed -i 's/ExecStart=.*/ExecStart=\/usr\/bin\/dockerd -H unix\:\/\/\/var\/run\/docker.sock -D -H tcp\:\/\/0.0.0.0\:2375 --registry-mirror=http\:\/\/a582cc4e.m.daocloud.io --live-restore/g' /lib/systemd/system/docker.service 私库1sed -i 's/ExecStart=.*/ExecStart=\/usr\/bin\/dockerd -H unix\:\/\/\/var\/run\/docker.sock -D -H tcp\:\/\/0.0.0.0\:2375 --registry-mirror=http\:\/\/a582cc4e.m.daocloud.io --insecure-registry 192.168.1.14\:5000 --live-restore/g' /lib/systemd/system/docker.service 阿里云加速1sed -i 's/ExecStart=.*/ExecStart=\/usr\/bin\/dockerd -H unix\:\/\/\/var\/run\/docker.sock -D -H tcp\:\/\/0.0.0.0\:2375 --registry-mirror=https\:\/\/0xl18ug0.mirror.aliyuncs.com --live-restore/g' /lib/systemd/system/docker.service 6、重启docker1234systemctl daemon-reloadsystemctl enable docker.servicesystemctl restart docker.serviceps -ef |grep docker #能看到docker启动以及2375端口 #7、安装pip以及docker api123yum -y install epel-releaseyum -y install python-pippip install docker-py docker-compose 8、创建consul用户及组12groupadd -g 1005 consuluseradd -u 105 -g 1005 -s /bin/false consul 9、创建consul数据存储文件夹12mkdir -p /opt/consul/&#123;data,conf&#125;chown -R consul: /opt/consul 10、设置主机hosts，有多少台主机，就需要设置多少hosts1234vim /etc/hosts192.168.1.14 master.localhost.com192.168.1.15 slave1.localhost.com192.168.1.16 slave2.localhost.com 二、配置consul cluster1、拉取consul镜像1docker pull progrium/consul #提示：目录没有官方出consul镜像，以上consul镜像是官方推荐的第三方docker image 2、启动consul server 192.168.1.1412345678910111213141516171819docker run -d \-p 8300:8300 \-p 8301:8301 \-p 8301:8301/udp \-p 8302:8302 \-p 8302:8302/udp \-p 8400:8400 \-p 8500:8500 \-p 8600:53 \-p 8600:53/udp \-v /opt/consul/data:/data \-h $HOSTNAME \--restart=always \--name=consul-s1 \progrium/consul \-server -bootstrap-expect=1 \-ui-dir=/ui \-client 0.0.0.0 \-advertise 192.168.1.14 3、启动consul server 192.168.1.1512345678910111213141516171819docker run -d \-p 8300:8300 \-p 8301:8301 \-p 8301:8301/udp \-p 8302:8302 \-p 8302:8302/udp \-p 8400:8400 \-p 8500:8500 \-p 8600:53 \-p 8600:53/udp \-v /opt/consul/data:/data \-h consul-s2 \--restart=always \--name=consul-s2 \progrium/consul \-server \-ui-dir=/ui \-client 0.0.0.0 \-advertise 192.168.1.15 -join 192.168.1.14 4、启动consul client 192.168.1.1612345678910111213141516docker run -d \-p 8300:8300 \-p 8301:8301 \-p 8301:8301/udp \-p 8302:8302 \-p 8302:8302/udp \-p 8400:8400 \-p 8500:8500 \-p 8600:53 \-p 8600:53/udp \-v /opt/consul/data:/data \-h consul-c1 \--restart=always \--name=consul-c1 \progrium/consul \-advertise 192.168.1.16 -join 192.168.1.14 三、registrator状态获取依次启动12345678docker run -d \--restart=always \--name=registrator \--net=host \-v /var/run/docker.sock:/tmp/docker.sock \gliderlabs/registrator \-ip 192.168.1.14 \consul://192.168.1.14:8500 12345678docker run -d \--restart=always \--name=registrator \--net=host \-v /var/run/docker.sock:/tmp/docker.sock \gliderlabs/registrator \-ip 192.168.1.15 \consul://192.168.1.15:8500 12345678docker run -d \--restart=always \--name=registrator \--net=host \-v /var/run/docker.sock:/tmp/docker.sock \gliderlabs/registrator \-ip 192.168.1.16 \consul://192.168.1.16:8500 四、安装shipyard、swarm1、192.168.1.14123456docker run -tid \-p 3375:3375 \--restart=always \--name shipyard-swarm-manager \swarm:latest \manage --host tcp://0.0.0.0:3375 consul://192.168.1.14:8500 1234567docker run -tid \--restart=always \--name=shipyard-rethinkdb \-p 28015:28015 \-p 29015:29015 \-v /opt/rethinkdb:/data \index.tenxcloud.com/docker_library/rethinkdb 123456789docker run -tid \--restart=always \--name shipyard-controller \--link shipyard-rethinkdb:rethinkdb \--link shipyard-swarm-manager:swarm \-p 8080:8080 \dockerclub/shipyard:latest \server \-d tcp://swarm:3375 12345docker run -tid \--restart=always \--name shipyard-swarm-agent \swarm:latest \join --addr 192.168.1.14:2375 consul://192.168.1.14:8500 2、安装swarm-agent主机192.168.1.15操作12345docker run -tid \--restart=always \--name shipyard-swarm-agent \swarm:latest \join --addr 192.168.1.15:2375 consul://192.168.1.14:8500 主机192.168.1.16操作12345docker run -tid \--restart=always \--name shipyard-swarm-agent \swarm:latest \join --addr 192.168.1.16:2375 consul://192.168.1.14:8500 五、安装haproxy或者nginx（192.168.1.14）1、安装haproxy123456789101112yum -y install git patch gcc gcc-c++ readline-devel zlib-devel libffi-devel \openssl openssl-devel make autoconf automake libtool bison libxml2 \libxml2-devel libxslt-devel libyaml-devel python python-docutils \cmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel \pcre-devel curl-devel libmcrypt libmcrypt-develcd /tmpwget http://www.haproxy.org/download/1.7/src/haproxy-1.7.0.tar.gztar -xvf /tmp/haproxy-1.7.0.tar.gz make TARGET=linux31 PREFIX=/opt/haproxymake install PREFIX=/opt/haproxy 2、配置haproxy.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253vim /opt/haproxy/conf/haproxy.confglobal log 127.0.0.1 local0 #log 127.0.0.1 local1 notice #log loghost local0 info maxconn 50000 chroot /opt/haproxy uid 99 gid 99 daemon nbproc 2 pidfile /opt/haproxy/run/haproxy.pid #debug #quiet defaults mode tcp option dontlognull option forwardfor option redispatch retries 2 balance static-rr stats enable stats uri /ha?stats #haproxy运行状态查看 自定义uri timeout connect 3000 timeout client 50000 timeout server 50000 listen admin_stat # 监听端口 bind *:8888 # http的7层模式 mode http #log global # 统计页面自动刷新时间 stats refresh 30s # 统计页面URL stats uri /admin?stats # 统计页面密码框上提示文本 stats realm Haproxy\ Statistics # 统计页面用户名和密码设置 stats auth admin:admin # 隐藏统计页面上HAProxy的版本信息 #stats hide-version listen login bind *:9999 mode tcp balance roundrobin option httpchk #maxconn 50000 #log 127.0.0.1 local0 debug 3、haproxy启动脚本 /etc/init.d/haproxy1234567891011121314151617181920212223242526272829303132333435363738394041424344#! /bin/bash# chkconfig: - 85 15# description: haproxy is a World Wide Web server. It is used to servePROGDIR=/opt/haproxyPROGNAME=haproxyDAEMON=$PROGDIR/sbin/$PROGNAMECONFIG=$PROGDIR/conf/$PROGNAME.confPIDFILE=$PROGDIR/run/$PROGNAME.pidDESC="HAProxy daemon"SCRIPTNAME=/opt/haproxy/init.d/$PROGNAME# Gracefully exit if the package has been removed.test -x $DAEMON || exit 0start() &#123; echo -n "Starting $DESC: $PROGNAME" $DAEMON -f $CONFIG echo "." &#125;stop() &#123; echo -n "Stopping $DESC: $PROGNAME" cat $PIDFILE | xargs kill echo "."&#125; reload() &#123; echo -n "reloading $DESC: $PROGNAME" $DAEMON -f $CONFIG -p $PIDFILE -sf $(cat $PIDFILE)&#125;case "$1" in start) start ;; stop) stop ;; reload) reload ;;*) echo "Usage: $SCRIPTNAME &#123;start|stop|reload&#125;" &gt;&amp;2 exit 1 ;;esacexit 0 4、启动haproxy,并加入到开启启动123chmod +x /etc/init.d/haproxychkconfig haproxy opservice haproxy start 5、安装nginx 并支持数字证书123456yum -y install git patch gcc gcc-c++ readline-devel zlib-devel libffi-devel \ openssl openssl-devel make autoconf automake libtool bison libxml2 \ libxml2-devel libxslt-devel libyaml-devel python python-docutils \ cmake imake expat-devel libaio libaio-devel bzr ncurses-devel wget \ libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel \ pcre-devel curl-devel libmcrypt libmcrypt-devel 6、下载安装openssl123456789 cd /tmpwget https://www.openssl.org/source/openssl-1.1.0c.tar.gz tar -xvf openssl-1.1.0c.tar.gz cd /tmp/openssl-1.1.0c./config --openssldir=/usr/local/sslmake &amp;&amp; make install./config shared --openssldir=/usr/local/sslmake cleanmake &amp;&amp; make install 7、下载安装 nginx1234567891011121314151617181920212223242526272829303132333435363738394041424344454647cd /tmpwget http://nginx.org/download/nginx-1.11.7.tar.gzgroupadd -r nginxuseradd -g nginx -r nginx -s /bin/falsetar -xvf nginx-1.11.7.tar.gzcd /tmp/nginx-1.11.7./configure --prefix=/usr/local/nginx \--sbin-path=/usr/sbin/nginx \--conf-path=/etc/nginx/nginx.conf \--error-log-path=/var/log/nginx/error.log \--http-log-path=/var/log/nginx/access.log \--pid-path=/var/run/nginx.pid \--lock-path=/var/run/nginx.lock \--http-client-body-temp-path=/var/cache/nginx/client_temp \--http-proxy-temp-path=/var/cache/nginx/proxy_temp \--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \--http-scgi-temp-path=/var/cache/nginx/scgi_temp \--user=nginx \--group=nginx \--with-http_ssl_module \--with-http_realip_module \--with-http_addition_module \--with-http_sub_module \--with-http_dav_module \--with-http_flv_module \--with-http_mp4_module \--with-http_gunzip_module \--with-http_gzip_static_module \--with-http_random_index_module \--with-http_secure_link_module \--with-http_stub_status_module \--with-http_auth_request_module \--with-threads \--with-stream \--with-openssl=/tmp/openssl-1.1.0c \--with-stream_ssl_module \--with-http_slice_module \--with-mail \--with-mail_ssl_module \--with-file-aio \--with-http_v2_module \--with-ipv6 mkdir -pv /var/cache/nginx/&#123;client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp&#125;mkdir -p /etc/nginx/conf.dmake &amp;&amp; make install 8、nginx配置文件修改/etc/nginx/nginx.confuser nginx;worker_processes 1; error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid; events { worker_connections 1024;} http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 65; gzip on; include /etc/nginx/conf.d/*.conf; } 添加nginx默认web配置文件/etc/nginx/conf.d/default.confserver { listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root /usr/local/nginx/html; index index.php index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \.php$ { root /usr/local/nginx/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } location ~* ^.+\.(jpg|jpeg|gif|png|bmp)$ { access_log off; root opencart; expires 30d; break; } } 9、创建nginx启动脚本 /etc/init.d/nginx12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152# chkconfig: 2345 10 90# description: Start and Stop redis PATH=/usr/local/bin:/sbin:/usr/bin:/bin EXEC=/usr/sbin/nginxPIDFILE=/var/run/nginx.pidCONF="/etc/nginx/nginx.conf"AUTH="1234" case "$1" in start) if [ -f $PIDFILE ] then echo "$PIDFILE exists, process is already running or crashed." else echo "Starting nginx server..." $EXEC &amp; fi if [ "$?"="0" ] then echo "nginx is running..." fi ;; stop) if [ ! -f $PIDFILE ] then echo "$PIDFILE exists, process is not running." else PID=$(cat $PIDFILE) echo "Stopping..." kill -9 $PID PID=$(pidof nginx) kill -9 $PID rm -rf /var/run/nginx.pid sleep 2 while [ -x $PIDFILE ] do echo "Waiting for nginx to shutdown..." sleep 1 done echo "nginx stopped" fi ;; restart|reload) $&#123;0&#125; stop $&#123;0&#125; start ;; *) echo "Usage: /etc/init.d/nginx &#123;start|stop|restart|reload&#125;" &gt;&amp;2 exit 1esac 10、设置nginx开机启动123chmod +x /etc/init.d/nginxchkconfig nginx onservice nginx start 六、安装consul-template 实现服务自动发现1、下载consul-template1234cd /tmpwget https://releases.hashicorp.com/consul-template/0.16.0/consul-template_0.16.0_linux_amd64.zipyum -y install unzipunzip /tmp/consul-template_0.16.0_linux_amd64.zip -d /usr/bin/ 2、consul-template haproxy配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475cat &gt; /opt/consul/conf/haproxy_ctmpl.json &lt;&lt; EOFconsul = "127.0.0.1:8500" template &#123; source = "/opt/haproxy/conf/haproxy.ctmpl" destination = "/opt/haproxy/conf/haproxy.conf" command = "/etc/init.d/haproxy reload"&#125;EOF3、haproxy.ctmpl配置 /opt/haproxy/conf/haproxy.ctmplglobal log 127.0.0.1 local0 #log 127.0.0.1 local1 notice #log loghost local0 info maxconn 50000 chroot /opt/haproxy uid 99 gid 99 daemon nbproc 2 pidfile /opt/haproxy/run/haproxy.pid #debug #quiet defaults mode tcp option dontlognull option forwardfor option redispatch retries 2 balance static-rr stats enable stats uri /ha?stats timeout connect 3000 timeout client 50000 timeout server 50000 listen admin_stat bind *:8888 mode http #log global stats refresh 30s stats uri /admin?stats stats realm Haproxy\ Statistics stats auth admin:admin #stats hide-version frontend www bind *:80 mode http acl apache hdr(HOST) apache.zone.com acl nginx hdr(HOST) nginx.zone.com use_backend apache.qkazone.com if apache use_backend nginx.qkazone.com if nginxbackend apache.zone.com balance roundrobin mode http&#123;&#123;range service "apache-php-80"&#125;&#125; server apache &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125; check &#123;&#123;end&#125;&#125; backend nginx.zone.com mode http balance roundrobin&#123;&#123;range service "nginx-80"&#125;&#125; server nginx &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125; check &#123;&#123;end&#125;&#125; listen login bind *:9999 mode tcp balance roundrobin #log 127.0.0.1 local0 debug &#123;&#123;range service "centos7"&#125;&#125; server ssh &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125; check &#123;&#123;end&#125;&#125; 4、配置consul-template haproxy 启动脚本 /etc/init.d/haproxy_ctmpl12345678910111213141516171819202122232425262728293031323334353637#!/bin/bash# chkconfig: 2345 10 90# description: Start and Stop redis PATH=/usr/local/bin:/sbin:/usr/bin:/binEXEC=/usr/bin/consul-templateCONF="/opt/consul/conf/haproxy_ctmpl.json"case "$1" in start) PID=$(ps -ef | grep -v grep | grep "$EXEC -config $CONF" | awk '&#123;print $2&#125;') if [ -n "$PID" ] then echo "haproxy_ctmpl is running..." else echo "Starting haproxy_ctmpl server..." $EXEC -config $CONF &gt; /tmp/haproxy_ctmpl.out 2&gt;&amp;1 &amp; fi ;; stop) PID=$(ps -ef | grep -v grep | grep "$EXEC -config $CONF" | awk '&#123;print $2&#125;') if [ -n "$PID" ] then echo "Stopping..." kill -9 $PID sleep 2 else echo "haproxy_ctmpl exists, process is not running." fi ;; restart|force-reload) $&#123;0&#125; stop $&#123;0&#125; start ;;*) echo "Usage: /etc/init.d/tmpl &#123;start|stop|restart|force-reload&#125;" &gt;&amp;2 exit 1esac 5、设置开机启动，启动123chmod +x /etc/init.d/haproxy_ctmplchkconfig haproxy_ctmpl onservice haproxy_ctmpl start 6、consul-template nginx配置 /opt/consul/conf/nginx_ctmpl.json123456789cat &gt; /opt/consul/conf/nginx_ctmpl.json &lt;&lt; EOFconsul = "127.0.0.1:8500" template &#123; source = "/etc/nginx/conf.d/nginx_web.ctmpl" destination = "/etc/nginx/conf.d/nginx_web.conf" command = "/usr/sbin/nginx -s reload"&#125;EOF 7、/etc/nginx/conf.d/nginx_web.ctmpl 配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172upstream apache &#123; ip_hash; # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream # least_conn; # least_time;&#123;&#123;range service "apache-php-80"&#125;&#125; server &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125; fail_timeout=0;&#123;&#123;end&#125;&#125; keepalive 64;&#125;server &#123; listen 80; server_name apache.zone.com; location / &#123; client_max_body_size 0; proxy_connect_timeout 300s; proxy_send_timeout 900; proxy_read_timeout 900; proxy_buffer_size 32k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_redirect off; proxy_hide_header Vary; proxy_set_header Accept-Encoding ''; proxy_set_header Host $host; proxy_set_header Referer $http_referer; proxy_set_header Cookie $http_cookie; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_headers_hash_max_size 51200; proxy_headers_hash_bucket_size 6400; proxy_pass http://apache/; &#125;&#125;upstream nginx &#123; ip_hash; # Refer: http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream # least_conn; # least_time;&#123;&#123;range service "nginx-80"&#125;&#125; server &#123;&#123;.Address&#125;&#125;:&#123;&#123;.Port&#125;&#125; fail_timeout=0;&#123;&#123;end&#125;&#125; keepalive 64;&#125;server &#123; listen 80; server_name nginx.zone.com; location / &#123; client_max_body_size 0; proxy_connect_timeout 300s; proxy_send_timeout 900; proxy_read_timeout 900; proxy_buffer_size 32k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_redirect off; proxy_hide_header Vary; proxy_set_header Accept-Encoding ''; proxy_set_header Host $host; proxy_set_header Referer $http_referer; proxy_set_header Cookie $http_cookie; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_headers_hash_max_size 51200; proxy_headers_hash_bucket_size 6400; proxy_pass http://nginx/; &#125;&#125; 8、配置consul-template nginx启动脚本 /etc/init.d/nginx_ctmpl12345678910111213141516171819202122232425262728293031323334353637#!/bin/bash# chkconfig: 2345 10 90# description: Start and Stop redisPATH=/usr/local/bin:/sbin:/usr/bin:/binEXEC=/usr/bin/consul-templateCONF="/opt/consul/conf/nginx_ctmpl.json"case "$1" in start) PID=$(ps -ef | grep -v grep | grep "$EXEC -config $CONF" | awk '&#123;print $2&#125;') if [ -n "$PID" ] then echo "haproxy_ctmpl is running..." else echo "Starting haproxy_ctmpl server..." $EXEC -config $CONF &gt; /tmp/nginx_ctmpl.out 2&gt;&amp;1 &amp; fi ;; stop) PID=$(ps -ef | grep -v grep | grep "$EXEC -config $CONF" | awk '&#123;print $2&#125;') if [ -n "$PID" ] then echo "Stopping..." kill -9 $PID sleep 2 else echo "haproxy_ctmpl exists, process is not running." fi ;; restart|force-reload) $&#123;0&#125; stop $&#123;0&#125; start ;;*) echo "Usage: /etc/init.d/tmpl &#123;start|stop|restart|force-reload&#125;" &gt;&amp;2 exit 1esac 9、设置开机启动123chmod +x /etc/init.d/nginx_ctmplchkconfig nginx_ctmpl onservice nginx_ctmpl start 七、测试是否自动发现12docker run -ti -d -p :80 eboraas/apache-php docker run -d -ti -p :80 nginx 1、consul webhttp://192.168.1.66:8500/ui/#/dc1/services 2、shipyard webhttp://192.168.1.23:8080账号admin密码 shipyard 3、haproxy webhttp://192.168.1.14:8888/admin?stats账号：admin 密码admin`]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>linux自动化运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-redis集群]]></title>
    <url>%2F2018%2F04%2F08%2Fdocker-redis%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[基于docker搭建redis集群方案master 192.168.1.14slave 192.168.1.15 master操作1.创建数据文件1mkdir /opt/redis 2.拉取redis镜像1docker pull benyoo/redis:3.2.5 3.配置redis文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455echo 'bind 0.0.0.0protected-mode yesport 6379tcp-backlog 511timeout 0tcp-keepalive 300daemonize nosupervised nopidfile /var/run/redis_6379.pidloglevel noticelogfile ""databases 8save 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yesrdbcompression yesrdbchecksum yesdbfilename dump.rdbdir /data/redisslave-serve-stale-data yesslave-read-only yesrepl-diskless-sync norepl-diskless-sync-delay 5repl-disable-tcp-nodelay noslave-priority 100appendonly noappendfilename "appendonly.aof"appendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbaof-load-truncated yeslua-time-limit 5000slowlog-log-slower-than 10000slowlog-max-len 128latency-monitor-threshold 0notify-keyspace-events ""hash-max-ziplist-entries 512hash-max-ziplist-value 64list-max-ziplist-size -2list-compress-depth 0set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64hll-sparse-max-bytes 3000activerehashing yesclient-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60hz 10aof-rewrite-incremental-fsync yes masterauth ZDU0NTlkNDY5NWZirequirepass ZDU0NTlkNDY5NWZi' &gt;/opt/redis/redis.conf 4.配置防火墙12iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment "REDIS_SERVER" -m multiport --dports 6379 -j ACCEPTiptables -nvxL --lin 5.启动redis容器12345678docker run -d \--privileged=true \--name redis-master \--restart=always \-p 6379:6379-v /opt/redis/redis.conf:/etc/redis.conf \-v /etc/localtime:/etc/localtime \benyoo/redis:3.2.5 slave上操作1.创建数据文件1mkdir /opt/redis 2.拉取redis镜像1docker pull benyoo/redis:3.2.5 3.配置redis文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556echo 'bind 0.0.0.0protected-mode yesport 6379tcp-backlog 511timeout 0tcp-keepalive 300daemonize nosupervised nopidfile /var/run/redis_6379.pidloglevel noticelogfile ""databases 8save 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yesrdbcompression yesrdbchecksum yesdbfilename dump.rdbdir /data/redisslave-serve-stale-data yesslave-read-only yesrepl-diskless-sync norepl-diskless-sync-delay 5repl-disable-tcp-nodelay noslave-priority 100appendonly noappendfilename "appendonly.aof"appendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbaof-load-truncated yeslua-time-limit 5000slowlog-log-slower-than 10000slowlog-max-len 128latency-monitor-threshold 0notify-keyspace-events ""hash-max-ziplist-entries 512hash-max-ziplist-value 64list-max-ziplist-size -2list-compress-depth 0set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64hll-sparse-max-bytes 3000activerehashing yesclient-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60hz 10aof-rewrite-incremental-fsync yes slaveof 192.168.1.14 6379masterauth ZDU0NTlkNDY5NWZirequirepass ZDU0NTlkNDY5NWZi' &gt;/opt/redis/redis.conf 4.配置防火墙12iptables -I INPUT 5 -p tcp -m state --state NEW -m tcp -m comment --comment "REDIS_SERVER" -m multiport --dports 6379 -j ACCEPTiptables -nvxL --lin 5.启动redis容器12345678docker run -d \--privileged=true \--name redis-slave \--restart=always \-p 6379:6379-v /opt/redis/redis.conf:/opt/redis/redis.conf \-v /etc/localtime:/etc/localtime \benyoo/redis:3.2.5 测试1234567891011121314151617docker exec -it redis redis-cli -h 192.168.1.15 -a ZDU0NTlkNDY5NWZi info replication# Replicationrole:slavemaster_host:192.168.1.14master_port:6379master_link_status:upmaster_last_io_seconds_ago:9master_sync_in_progress:0slave_repl_offset:281slave_priority:100slave_read_only:1connected_slaves:0master_repl_offset:0repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0 12345678910docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi info replication # Replicationrole:masterconnected_slaves:1slave0:ip=192.168.1.15,port=6379,state=online,offset=295,lag=1master_repl_offset:295repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:2repl_backlog_histlen:294 12docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi set Test_Write_key www.shangtv.cn #创建数据OK 12docker exec -it redis redis-cli -h 192.168.1.14 -a ZDU0NTlkNDY5NWZi get Test_Write_key www.shangtv.cn]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>linux自动化运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[registry v2搭建]]></title>
    <url>%2F2018%2F04%2F08%2Fregistry-v2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[新版 registry v2对镜像存储格式进行了重新设计，并且和旧版还不兼容。registry v2是由go语言开发，docker从1.6版本开始支持registry v2，之前python开发的老版registry在网上已被标为废弃了（没有维护更新，但也可以用）。之前在测试环境搭建了一个老版的registry，用了也比较久了。为了跟上技术的脚步，也准备今后使用新版registry v2。由于对旧版是不兼容的，所以之前仓库的数据目录还不能直接拿来挂载，只好重新做个新的，镜像只好等以后慢慢再放上去了。下面对我这次配置的步骤简单的介绍一下。服务器环境本次使用centos7.3的操作系统，服务器IP假设为：192.168.0.100预先装好docker服务，操作如下： 添加docker.repo安装源，写入文件12345678tee /etc/yum.repos.d/docker.repo&lt;&lt;EOF[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/7/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF 安装docker123yum install docker-engine -ysystemctl enable dockersystemctl start docker 1. 获取最新的registry的容器,了解到目前最新版为2.4.1，于是直接使用docker pull命令从公用仓库去拉即可1docker pull registry:2.4.1 2. 运行registry:2.4.1容器这里需要注意的是新registry仓库数据目录的位置。之前老版的位置是/tmp/registry，hub.docker.com上的演示命令里写的是/tmp/registry-dev，其实这个不对。试验证明，新registry的仓库目录是在/var/lib/registry，所以运行时挂载目录需要注意。123docker run -d -p 5000:5000 --restart=always \-v /opt/registry-var/:/var/lib/registry/ \registry:2.4.1 -v选项指定将/opt/registry-var/目录挂载给/var/lib/registry/当使用curl http://192.168.0.100:5000/v2/_catalog能看到json格式的返回值时，说明registry已经运行起来了。 3. 修改配置文件以指定registry地址上面registry虽然已经运行起来了，但是如果想用push命令上传镜像是会报错的，需要在配置文件中指定registry的地址。在/lib/systemd/system/docker.service文件中添加一下配置：–insecure-registry 192.168.0.100:5000’ 为了配置简单，省去安全相关的配置，这里使用–insecure-registry选项修改配置文件后，一定要重启docker服务才能生效，1systemctl restart docker 这时再push就可以上传镜像到所搭建的registry仓库了。需要注意的是，上传前要先给镜像tag一个192.168.0.100:5000/为前缀的名字，这样才能在push的时候存到私库。12docker tag docker.io/registry:2.4.1 192.168.0.100:5000/registry:2.4.1docker push 192.168.0.100:5000/registry:2.4.1 4. 配置带用户权限的registry到上面为止，registry已经可以使用了。如果想要控制registry的使用权限，使其只有在登录用户名和密码之后才能使用的话，还需要做额外的设置。 registry的用户名密码文件可以通过htpasswd来生成：12mkdir /opt/registry-var/auth/docker run --entrypoint htpasswd registry:2.4.1 -Bbn felix felix &gt;&gt; /opt/registry-var/auth/htpasswd 上面这条命令是为felix用户名生成密码为felix的一条用户信息，存在/opt/registry-var/auth/htpasswd文件里面，文件中存的密码是被加密过的。使用带用户权限的registry时候，容器的启动命令就跟上面不一样了，将之前的容器停掉并删除，然后执行下面的命令：1234567docker run -d -p 5000:5000 --restart=always \-v /opt/registry-var/auth/:/auth/ \-e "REGISTRY_AUTH=htpasswd" \-e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \-v /opt/registry-var/:/var/lib/registry/ \registry:2.4.1 这时，如果直接想查看仓库信息、pull或push都会出现权限报错。必须先使用docker login 命令来登录私有仓库：1docker login 192.168.0.100:5000 根据提示，输入用户名和密码即可。如果登录成功，会在/root/.docker/config.json文件中保存账户信息，这样就可以继续使用了。]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>linux自动化运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[etcd集群]]></title>
    <url>%2F2018%2F04%2F08%2Fetcd%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[搭建集群etcd安装etcd可以通过源码编译安装，也可以用yum安装，这里实验用yum安装 Configure epel yum1wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm &amp;&amp; rpm -ivh epel-release-latest-7.noarch.rpm install etcd1yum install -y etcd configure host12echo "etcd1 192.168.1.100" &gt;&gt; /etc/hostsecho "etcd2 192.168.1.200" &gt;&gt; /etc/hosts 1234IP=$(ifconfig eth1 |awk -F '[: ]+' 'NR==2&#123;print $3&#125;')IP1=192.168.1.100IP2=192.168.1.200HOST="etcd1=http://192.168.1.100:2380,etcd2=http://192.168.1.200:2380" 123456789101112131415161718192021222324252627282930function node1&#123;#Configure the node1 etcd filesed -i 's#\#ETCD_LISTEN_PEER_URLS="http://localhost:2380"#ETCD_LISTEN_PEER_URLS="http://$&#123;IP1&#125;:2380"#g' /etc/etcd/etcd.confsed -i 's#ETCD_LISTEN_CLIENT_URLS="http://localhost:2379"#ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"#g' /etc/etcd/etcd.confsed -i 's#ETCD_ADVERTISE_CLIENT_URLS="http://localhost:2379"#ETCD_ADVERTISE_CLIENT_URLS="http://$&#123;IP1&#125;:2379"#g' /etc/etcd/etc.confsed -i 's#\#ETCD_INITIAL_CLUSTER="default=http://localhost:2380"#ETCD_INITIAL_CLUSTER="$&#123;HOST&#125;"#'g&#125;function node2&#123;#Configure the node2 etcd filesed -i 's#\#ETCD_LISTEN_PEER_URLS="http://localhost:2380"#ETCD_LISTEN_PEER_URLS="http://$&#123;IP2&#125;:2380"#g' /etc/etcd/etcd.confsed -i 's#ETCD_LISTEN_CLIENT_URLS="http://localhost:2379"#ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"#g' /etc/etcd/etcd.confsed -i 's#ETCD_ADVERTISE_CLIENT_URLS="http://localhost:2379"#ETCD_ADVERTISE_CLIENT_URLS="http://$&#123;IP2&#125;:2379"#g' /etc/etcd/etc.confsed -i 's#\#ETCD_INITIAL_CLUSTER="default=http://localhost:2380"#ETCD_INITIAL_CLUSTER="$&#123;HOST&#125;"#g' /etc/etcd/etc.conf&#125;function start&#123; systemctl enable etcd systemctl restart etcd systemctl status etcd&#125;if [ "$IP"=="$IP1" ];then node1 startelse node2 startfi look etcd node list1etcdctl member list look etcd node status1etcdctl cluster-health]]></content>
      <tags>
        <tag>linux自动化运维</tag>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Add User Script]]></title>
    <url>%2F2018%2F04%2F04%2FAdd-User-Script%2F</url>
    <content type="text"><![CDATA[服务器自动添加用户，并发送邮件 123456789101112131415161718192021222324252627282930#!/bin/bashpassword=&quot;password&quot;ip=`ifconfig eth1 |grep inet |awk &apos;&#123;printf &quot;IP:&quot;&#125;&apos;&apos;&#123;print $2&#125;&apos;`echo &quot;请输入要创建的用户名：&quot;read usernameecho &quot;您输入的用户名为: $username&quot;egrep &quot;^servergroups&quot; /etc/group &gt;&amp; /dev/nullif [ $? -ne 0 ]then groupadd servergroupselse echo &quot;已存在servergroups组&quot;fiegrep &quot;^$username&quot; /etc/passwd &gt;&amp; /dev/nullif [ $? -ne 0 ]then useradd $username &amp;&amp; \ usermod -aG servergroups $username &amp;&amp; \ echo $username | passwd --stdin $username chage -d 0 $username echo &quot;创建 $username 用户成功&quot; #echo &quot;密码为:$password&quot; id $username text=&quot;用户名：$username\n密码为：$username\n$ip\n注意：第一次登陆必须要修改密码!!!!&quot; echo -e &quot;$text&quot; | mail -s &quot;$username,服务器用户创建成功，请及时修改密码!!&quot; $username@qq.comelse echo &quot;$username 已存在&quot; id $usernamefi]]></content>
      <tags>
        <tag>Linux自动化之路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，Oliver]]></title>
    <url>%2F2018%2F04%2F04%2F%E4%BD%A0%E5%A5%BD%EF%BC%8COliver%2F</url>
    <content type="text"></content>
  </entry>
</search>
